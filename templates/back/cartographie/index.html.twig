{% extends 'back/base_bo.html.twig' %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
    {# <section class="fr-grid-row fr-grid-row--middle fr-p-5v ">
        <div class="fr-col-6">
            <h1 class="fr-h2 fr-mb-0">Géolocalisation des signalements</h1>
        </div>
    </section> #}

    <div style="position: absolute;z-index: 10000;overflow: hidden" class="fr-rounded fr-background--white fr-m-2v">
        {% include 'back/_filter_form.html.twig' %}
    </div>
    <section class="fr-grid-row fr-pt-0 fr-h-100">
        <div class="fr-col-12 signalement-invalid" id="container">
            <div class="fr-h-100 fr-w-100" id="map-signalements-view"></div>
        </div>
    </section>
{% endblock %}
{% block javascripts %}
    <script>
        // Le point en bas à gauche de la carte
        var sudOuest = L.latLng(58,-2);
        // Le point en haut à droite  de la carte
        var nordEst = L.latLng(41,9);
        // L'étendue
        var bounds = L.latLngBounds(sudOuest, nordEst);
        let map = L.map('map-signalements-view',{
            center: [47.11, -0.01],
            maxBounds: bounds,
            minZoom:6,
            maxZoom: 18,
            zoom: 7
        });
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(map);
        let offset = 0;
        let markers = L.markerClusterGroup();
        async function getMarkers(offset) {
            await fetch('?load_markers=true&offset=' + offset).then(r => r.json().then(res => {
                let greenIcon = new L.Icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });
                let redIcon = new L.Icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });
                let blueIcon = new L.Icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });

                let criteres = [];
                let marker;


              if(!res.signalements.length) {
                  markers.getLayers().forEach((layer, index) => {
                      let type;
                      switch (layer.options.status) {
                          case "1":
                              type = 'info';
                              break;
                          case "2":
                              type = 'success';
                              break;
                          case "6":
                              type = 'error';
                              break;
                      }
                      let HTML = `<div class="fr-grid-row" style="width: 500px">
                        <div class="fr-col-8">
                            <a href="${layer.options.url}" class="fr-badge fr-badge--${type} fr-mt-1v fr-mb-0">#${layer.options.reference}</a>
                            <p><strong>${layer.options.name}</strong><br>
                            <small>
                            ${layer.options.address} <br>
                            ${layer.options.zip} ${layer.options.city}</small></p>
                        </div>
                        <div class="fr-col-4 fr-col--top fr-text--center">
                        <canvas class="fr-col-12" id="gauge-signalement-${layer.options.id}"></canvas>`;
                      if (layer.options.danger)
                          type = "warning";
                      HTML += `<span class="fr-badge fr-badge--${type} fr-m-0">${parseInt(layer.options.score).toFixed(2)}%</span>`;
                      HTML += `</div>`;
                      HTML += `<div class="fr-p-3v fr-rounded fr-background-alt--blue-france fr-col-12">${layer.options.details}</div>`;
                      HTML += `<ul class="fr-mt-5v">`;
                      layer.options.criteres.forEach(critere => {
                          HTML += `<li class="">${critere}</li>`;
                      })
                      HTML += `</ul></div>`;

                      layer.bindPopup(HTML, {
                          maxWidth: 500,
                      }).on('popupopen', (event) => {
                          var px = map.project(event.target._popup._latlng); // find the pixel location on the map where the popup anchor is
                          px.y -= event.target._popup._container.clientHeight / 2; // find the height of the popup container, divide by 2, subtract from the Y axis of marker location
                          map.panTo(map.unproject(px), {animate: true}); // pan to new center
                          gauge = new Gauge(event.popup._wrapper.querySelector(`#gauge-signalement-${layer.options.id}`)).setOptions(opts);
                          gauge.maxValue = 100;
                          gauge.set(layer.options.score);
                          gauge.setMinValue(0);
                          gauge.animationSpeed = 32;
                      });

                  })
                  let bound = markers.getBounds();
                  map.fitBounds([
                      [bound._northEast.lat, bound._northEast.lng],
                      [bound._southWest.lat, bound._southWest.lng]
                  ]);
                  document.querySelector('#container.signalement-invalid').classList.remove('signalement-invalid')
              } else {

                  res.signalements.forEach(signalement => {
                      /*            console.log(signalement.criteres)
                                  console.log(signalement.id)*/
                      let crit = [];
                      if(signalement.criteres instanceof Array){
                          signalement?.criteres?.map(c => {
                              crit.push(c?.label);
                          })
                      }
                      marker = L.marker([signalement.geoloc.lng, signalement.geoloc.lat], {
                          id: signalement.id,
                          status: signalement.statut,
                          address: signalement.adresseOccupant,
                          zip: signalement.cpOccupant,
                          city: signalement.villeOccupant,
                          reference: signalement.reference,
                          score: signalement.scoreCreation,
                          name: signalement.nomOccupant + signalement.prenomOccupant,
                          danger: signalement.scoreCreation > 66 ? 1 : 0,
                          url: "path('back_signalement_view',~{uuid:signalement.uuid})",
                          criteres: crit ,
                          details: `${signalement.details}`
                      })

                      // console.log(marker)
                      markers.addLayer(marker);
                  })
                  map.addLayer(markers);
                  getMarkers(offset+300)
              }


                // document.currentScript.remove();
            }))
        }


        window.onload = async () => {
            await getMarkers(0);
       }

    </script>
{% endblock %}
